---
- name: Install Single-Node K3s
  hosts: "{{ target_hosts }}"
  become: true
  gather_facts: yes
  vars:
    vault_addr: "{{ vault_addr | default('https://vault.fullstack.pw') }}"
    adjectives:
      - "cozy"
      - "comfy"
      - "homey"
      - "snug"
      - "warm"
      - "secure"
      - "smart"
      - "connected"
      - "peaceful"
      - "tranquil"
    nouns:
      - "haven"
      - "nest"
      - "abode"
      - "shelter"
      - "dwelling"
      - "retreat"
      - "sanctuary"
      - "hearth"
      - "den"
      - "cottage"
  tasks:
    - name: Set random cluster name if no explicit name provided
      set_fact:
        random_adjective: "{{ adjectives | random }}"
        random_noun: "{{ nouns | random }}"
      run_once: true
      when: explicit_cluster_name is not defined

    - name: Lock in final cluster name
      set_fact:
        cluster_name: "{{ explicit_cluster_name | default(random_adjective + '-' + random_noun) }}"
      run_once: true

    - name: Update apt cache
      apt:
        update_cache: yes
        cache_valid_time: 3600

    - name: Install basic dependencies
      apt:
        name:
          - curl
          - apt-transport-https
          - ca-certificates
          - python3
          - python3-venv
        state: present

    - name: Create /mnt/storage directory
      file:
        path: /mnt/storage
        state: directory
        mode: '0755'

    - name: Install K3s with custom local-path storage directory
      shell: |
        curl -sfL https://get.k3s.io | INSTALL_K3S_EXEC="--default-local-storage-path=/mnt/storage" sh -s -
      args:
        executable: /bin/bash
      register: k3s_install
      failed_when: k3s_install.rc != 0

    - name: Wait for K3s service file to exist
      wait_for:
        path: /etc/systemd/system/k3s.service
        state: present
        timeout: 30
      register: service_file
      failed_when: false

    - name: Daemon reload if service file exists
      systemd:
        daemon_reload: yes
      when: service_file is succeeded
      failed_when: false

    - name: Check K3s service status
      command: systemctl status k3s
      register: k3s_status
      changed_when: false
      failed_when: false
      
    - name: Start K3s service using systemctl
      command: systemctl start k3s
      when: k3s_status.rc != 0
      changed_when: true
      failed_when: false
      
    - name: Enable K3s service using systemctl
      command: systemctl enable k3s
      changed_when: true
      failed_when: false

    - name: Display node token
      shell: cat /var/lib/rancher/k3s/server/node-token
      register: node_token
      changed_when: false

    - debug:
        msg: "Node token for {{ inventory_hostname }}: {{ node_token.stdout }}"

    - name: Fetch kubeconfig
      shell: cat /etc/rancher/k3s/k3s.yaml
      register: kubeconfig_content
      changed_when: false

    - name: Debug cluster name and inventory hostname
      debug:
        msg: 
          - "Inventory hostname: {{ inventory_hostname }}"
          - "Using cluster name: {{ cluster_name }}"

    - name: Set host IP variable
      set_fact:
        host_ip: "{{ ansible_eth0.ipv4.address }}"
      run_once: true

    - name: Create kubeconfig with server address and names substituted
      delegate_to: localhost
      become: false
      copy:
        content: "{{ kubeconfig_content.stdout | replace('127.0.0.1', host_ip) | replace('name: default', 'name: ' + inventory_hostname) | replace('current-context: default', 'current-context: ' + inventory_hostname) | replace('cluster: default', 'cluster: ' + cluster_name) | replace('user: default', 'user: ' + cluster_name) }}"
        dest: "/tmp/{{ cluster_name }}-kubeconfig"
      run_once: true

    - name: Copy kubeconfig update script to controller
      delegate_to: localhost
      become: false
      copy:
        src: "{{ playbook_dir }}/../scripts/update_kubeconfig.py"
        dest: "/tmp/update_kubeconfig.py"
        mode: '0755'
      run_once: true
      register: script_copy

    - name: Install Python requirements
      delegate_to: localhost
      become: false
      command: pip install --user pyyaml hvac
      run_once: true
      when: script_copy is succeeded

    - name: Update kubeconfig in Vault using Python script
      delegate_to: localhost
      become: false
      command: >
        python3 /tmp/update_kubeconfig.py
        --cluster-name "{{ cluster_name }}"
        --kubeconfig-file "/tmp/{{ cluster_name }}-kubeconfig"
        --vault-addr "{{ vault_addr }}"
        --inventory-name "{{ inventory_hostname }}"
        --vault-path "kv/cluster-secret-store/secrets/KUBECONFIG"
      environment:
        VAULT_TOKEN: "{{ vault_token }}"
      register: vault_update_result
      run_once: true
      when: script_copy is succeeded and vault_token is defined and vault_token != ""
      ignore_errors: yes

    - name: Download clusterctl binary
      delegate_to: localhost
      get_url:
        url: "https://github.com/kubernetes-sigs/cluster-api/releases/latest/download/clusterctl-linux-amd64"
        dest: "/usr/local/bin/clusterctl"
        mode: '0755'
        owner: root
        group: root
      become: true

    - name: Verify clusterctl installation
      delegate_to: localhost
      command: clusterctl version
      register: clusterctl_version
      changed_when: false

    - name: Display clusterctl version
      debug:
        msg: "Installed clusterctl version: {{ clusterctl_version.stdout }}"

    - name: Extract Proxmox URL (remove /api2/json suffix)
      set_fact:
        proxmox_url_clean: "{{ lookup('env', 'PROXMOX_URL') | regex_replace('/api2.*$', '') }}"
      delegate_to: localhost
      become: false
      run_once: true

    - name: Initialize cluster-api with providers
      shell: |
        unset KUBECONFIG
        export KUBECONFIG="/tmp/{{ cluster_name }}-kubeconfig"
        export PROXMOX_URL="{{ proxmox_url_clean }}"
        export PROXMOX_TOKEN="{{ lookup('env', 'PROXMOX_TOKEN_ID') }}"
        export PROXMOX_SECRET="{{ lookup('env', 'PROXMOX_SECRET') }}"

        echo "Using kubeconfig: $KUBECONFIG"
        echo "Checking if kubeconfig file exists:"
        ls -la "/tmp/{{ cluster_name }}-kubeconfig"
        echo "Full kubeconfig content:"
        cat "/tmp/{{ cluster_name }}-kubeconfig"
        echo "Checking kubectl config:"
        kubectl config view
        echo "Current context:"
        kubectl config current-context
        echo "Available contexts:"
        kubectl config get-contexts
        echo "Testing connection:"
        kubectl get nodes -v=6

        clusterctl init --infrastructure proxmox --ipam in-cluster --control-plane talos --bootstrap talos
      args:
        executable: /bin/bash
      register: clusterctl_init
      delegate_to: localhost
      become: false
      run_once: true

    - name: Display cluster-api initialization result
      debug:
        msg: "Cluster-API initialization completed: {{ clusterctl_init.stdout }}"
      when: clusterctl_init is defined

    - name: Verify cluster-api installation
      shell: |
        export KUBECONFIG="/tmp/{{ cluster_name }}-kubeconfig"
        kubectl get pods -A | grep -E "(capi|cluster-api|talos|proxmox)"
      args:
        executable: /bin/bash
      register: capi_pods
      changed_when: false
      failed_when: false
      delegate_to: localhost
      become: false
      run_once: true

    - name: Display cluster-api pods status
      debug:
        msg: "Cluster-API pods: {{ capi_pods.stdout_lines }}"
      when: capi_pods.stdout != ""