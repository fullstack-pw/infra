#cloud-config
hostname: ${CONTROL_PLANE_VM_NAME}
manage_etc_hosts: true
package_update: true
package_upgrade: true
packages:
  - apt-transport-https
  - ca-certificates
  - curl
  - gnupg
  - lsb-release
  - net-tools
  - ipvsadm
  - jq
  - ncat
  - vim
  - nano
  - software-properties-common

write_files:
  # Load kernel modules for containerd
  - path: /etc/modules-load.d/containerd.conf
    owner: root:root
    permissions: '0644'
    content: |
      overlay
      br_netfilter
  
  # Kubernetes sysctl settings
  - path: /etc/sysctl.d/99-kubernetes-cri.conf
    owner: root:root
    permissions: '0644'
    content: |
      net.bridge.bridge-nf-call-iptables = 1
      net.bridge.bridge-nf-call-ip6tables = 1
      net.ipv4.ip_forward = 1
  
  # Updated kubeadm init configuration
  - path: /tmp/kubeadm-init.yaml
    owner: root:root
    permissions: '0644'
    content: |
      apiVersion: kubeadm.k8s.io/v1beta4
      kind: InitConfiguration
      nodeRegistration:
        criSocket: unix:///run/containerd/containerd.sock
      ---
      apiVersion: kubeadm.k8s.io/v1beta4
      kind: ClusterConfiguration
      kubernetesVersion: v${K8S_VERSION}
      networking:
        podSubnet: ${POD_CIDR}
      ---
      apiVersion: kubelet.config.k8s.io/v1beta1
      kind: KubeletConfiguration
      cgroupDriver: systemd

runcmd:
  # Disable swap
  - swapoff -a
  - sed -i '/swap/s/^/#/' /etc/fstab
  
  # Load kernel modules
  - modprobe overlay
  - modprobe br_netfilter
  
  # Apply sysctl settings
  - sysctl --system
  
  # Install Docker repo for containerd
  - curl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
  - echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | tee /etc/apt/sources.list.d/docker.list > /dev/null
  
  # Install containerd
  - apt-get update
  - apt-get install -y containerd.io
  
  # Configure containerd
  - mkdir -p /etc/containerd
  - containerd config default > /etc/containerd/config.toml
  - sed -i 's/SystemdCgroup = false/SystemdCgroup = true/g' /etc/containerd/config.toml
  - sed -i 's|sandbox_image = "registry.k8s.io/pause:3.8"|sandbox_image = "registry.k8s.io/pause:3.10"|g' /etc/containerd/config.toml
  - systemctl restart containerd
  - systemctl enable containerd
  
  # Install Kubernetes repository
  - mkdir -p /etc/apt/keyrings
  - curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.33/deb/Release.key | gpg --dearmor -o /etc/apt/trusted.gpg.d/k8s.gpg
  - echo "deb [signed-by=/etc/apt/trusted.gpg.d/k8s.gpg] https://pkgs.k8s.io/core:/stable:/v1.33/deb/ /" | tee /etc/apt/sources.list.d/kubernetes.list
  
  # Install Kubernetes components
  - apt-get update
  - apt-get install -y kubelet=1.33.0-1.1 kubeadm=1.33.0-1.1 kubectl=1.33.0-1.1
  - apt-mark hold kubelet kubeadm kubectl
  
  # Initialize the Kubernetes control plane
  - kubeadm init --config=/tmp/kubeadm-init.yaml --ignore-preflight-errors=NumCPU,Mem
  
  # Set up kubeconfig for root user
  - mkdir -p /root/.kube
  - cp -i /etc/kubernetes/admin.conf /root/.kube/config
  - chown root:root /root/.kube/config
  
  # Install Cilium CNI
  - mkdir -p /opt/cilium
  - curl -L --remote-name-all https://github.com/cilium/cilium-cli/releases/latest/download/cilium-linux-amd64.tar.gz
  - tar xzvfC cilium-linux-amd64.tar.gz /usr/local/bin
  - rm cilium-linux-amd64.tar.gz
  - cilium install --version 1.17.3

  # Allow workloads on the control plane
  - kubectl --kubeconfig=/etc/kubernetes/admin.conf taint nodes --all node-role.kubernetes.io/control-plane-
  
  # Create a join command for worker nodes
  - kubeadm token create --print-join-command > /etc/kubeadm-join-command
  - chmod 644 /etc/kubeadm-join-command
  
  # Install kube-bench for CIS benchmarking
  - curl -L -o /tmp/kube-bench.deb https://github.com/aquasecurity/kube-bench/releases/download/v0.10.1/kube-bench_0.10.1_linux_amd64.deb
  - dpkg -i /tmp/kube-bench.deb
  
  # Set up kubeconfig for suporte user
  - mkdir -p /home/suporte/.kube
  - cp -i /etc/kubernetes/admin.conf /home/suporte/.kube/config
  - chown -R suporte:suporte /home/suporte/.kube

users:
  - name: suporte
    sudo: ALL=(ALL) NOPASSWD:ALL
    shell: /bin/bash
    ssh_authorized_keys:
      - ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIFpSnkZ/nO64XpBZl+lcKHAEd8vCwbpKVxsXYvPuXI+C pedro@fedora