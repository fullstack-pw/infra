name: Ansible Provisioning

on:
  push:

jobs:
  detect-ansible-command:
    if: >
      (github.event_name == 'pull_request' && github.event.pull_request.merged == true && contains(github.event.head_commit.message, '[ansible'))
    runs-on: self-hosted
    outputs:
      playbook: ${{ steps.get-playbook.outputs.playbook }}
      should_run: ${{ steps.get-playbook.outputs.should_run }}
    steps:
      - name: Extract Ansible Playbook from Commit Message
        id: get-playbook
        run: |
          # Handle different event types
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            PR_TITLE="${{ github.event.pull_request.title }}"
            COMMIT_MSG="${{ github.event.pull_request.head.label }} ${{ github.event.pull_request.body }}"
            COMBINED="$PR_TITLE $COMMIT_MSG"
          else
            COMBINED="${{ github.event.head_commit.message }}"
          fi

          # Look for [ansible playbook-name] pattern
          if [[ $COMBINED =~ \[ansible[[:space:]]+([^\]]+)\] ]]; then
            PLAYBOOK="${BASH_REMATCH[1]}"
            # Trim whitespace
            PLAYBOOK=$(echo $PLAYBOOK | xargs)
            echo "Found playbook: $PLAYBOOK"
            echo "playbook=$PLAYBOOK" >> $GITHUB_OUTPUT
            echo "should_run=true" >> $GITHUB_OUTPUT
          else
            echo "No ansible command found in commit message"
            echo "should_run=false" >> $GITHUB_OUTPUT
          fi
  run-ansible:
    needs: detect-ansible-command
    if: needs.detect-ansible-command.outputs.should_run == 'true'
    runs-on: self-hosted
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install Ansible
        run: |
          python3 -m pip install --upgrade pip
          pip install ansible

      - name: Determine Playbook Path
        id: playbook-path
        run: |
          PLAYBOOK="${{ needs.detect-ansible-command.outputs.playbook }}"

          # Check playbooks directory first
          if [ -f "proxmox/playbooks/${PLAYBOOK}.yml" ]; then
            echo "Found playbook file: proxmox/playbooks/${PLAYBOOK}.yml"
            echo "PLAYBOOK_PATH=proxmox/playbooks/${PLAYBOOK}.yml" >> $GITHUB_ENV
          else
            echo "Playbook file not found for: ${PLAYBOOK}"
            echo "Searched in playbooks/, proxmox/, and root directories"
            exit 1
          fi

      - name: Prepare Environment
        run: |
          mkdir -p ~/.ssh
          echo "${SSH_PRIVATE_KEY}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa

          # Check if we have new hosts to limit execution to
          if [ -f "proxmox/new_hosts.txt" ] && [ -s "proxmox/new_hosts.txt" ]; then
            echo "Found new hosts, adding them to known_hosts:"
            
            # Loop through new hosts file
            while IFS=, read -r IP ENV; do
              if [ -n "$IP" ] && [[ $IP =~ ^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+ ]]; then
                echo "Adding new host $IP to known_hosts..."
                ssh-keyscan -H $IP >> ~/.ssh/known_hosts 2>/dev/null || echo "Warning: Could not scan $IP"
              fi
            done < proxmox/new_hosts.txt
          else
            echo "No new hosts found, not scanning any hosts"
          fi
        if: env.PLAYBOOK_PATH != ''

      - name: Determine playbook type and run
        run: |
          echo "Detected playbook: ${{ needs.detect-ansible-command.outputs.playbook }}"

          # Handle different playbook types
          PLAYBOOK_NAME="${{ needs.detect-ansible-command.outputs.playbook }}"

          if [[ $PLAYBOOK_NAME =~ ^talos-(.+)$ ]]; then
            # Talos cluster bootstrap
            CLUSTER_NAME="${BASH_REMATCH[1]}"
            echo "Bootstrapping Talos cluster: $CLUSTER_NAME"
            
            # First configure HAProxy if it exists
            if ansible-inventory -i proxmox/k8s.ini --list | grep -q "haproxy-${CLUSTER_NAME}"; then
              echo "Configuring HAProxy for cluster: $CLUSTER_NAME"
              ansible-playbook proxmox/playbooks/haproxy-config.yml -i proxmox/k8s.ini -e "target_hosts=haproxy-${CLUSTER_NAME}"
            fi
            
            # Then bootstrap Talos
            ansible-playbook proxmox/playbooks/talos-bootstrap.yml -i proxmox/k8s.ini -e "target_hosts=$CLUSTER_NAME"
            
          elif [[ $PLAYBOOK_NAME =~ ^k8s-(.+)$ ]]; then
            # K3s cluster setup  
            CLUSTER_NAME="${BASH_REMATCH[1]}"
            echo "Setting up K3s cluster: $CLUSTER_NAME"
            ansible-playbook proxmox/playbooks/k8s.yml -i proxmox/k8s.ini -e "target_hosts=$CLUSTER_NAME"
            
          else
            # Direct playbook execution
            echo "Running direct playbook: $PLAYBOOK_NAME"
            PLAYBOOK_PATH="proxmox/playbooks/${PLAYBOOK_NAME}.yml"
            if [ -f "$PLAYBOOK_PATH" ]; then
              ansible-playbook $PLAYBOOK_PATH -i proxmox/k8s.ini
            else
              echo "Playbook not found: $PLAYBOOK_PATH"
              exit 1
            fi
          fi

      - name: Run Ansible Playbook
        run: |
          echo "Running playbook: $PLAYBOOK_PATH"
          export PATH=$PATH:/home/runner/.local/bin

          # Check if we have new hosts to limit execution to
          if [ -f "proxmox/new_hosts.txt" ] && [ -s "proxmox/new_hosts.txt" ]; then
            echo "Found new hosts, running playbook only on them:"
            cat proxmox/new_hosts.txt
            
            # Run the playbook for each new host directly
            while IFS=, read -r IP ENV; do
              if [ -n "$IP" ] && [ -n "$ENV" ]; then
                # Create a temporary inventory file for this host
                TEMP_INVENTORY=$(mktemp)
                echo "[all]" > $TEMP_INVENTORY
                echo "$IP ansible_user=suporte" >> $TEMP_INVENTORY
                
                echo "Running playbook for new host $IP"
                # In the run step
                ANSIBLE_HOST_KEY_CHECKING=False ansible-playbook -i "$TEMP_INVENTORY" $PLAYBOOK_PATH \
                  -e "ansible_user=suporte" \
                  -e "target_hosts=all" \
                  -e "vault_token=${VAULT_TOKEN}" \
                  -e "vault_addr=https://vault.fullstack.pw"
                
                # Clean up
                rm $TEMP_INVENTORY
              fi
            done < proxmox/new_hosts.txt
          else
            echo "No new hosts found"
          fi
        if: env.PLAYBOOK_PATH != ''

      - name: Notify Completion
        run: |
          echo "✅ Ansible playbook execution completed: ${{ needs.detect-ansible-command.outputs.playbook }}"
        if: success() && env.PLAYBOOK_PATH != ''

      - name: Notify Failure
        if: failure() && env.PLAYBOOK_PATH != ''
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## Ansible Provisioning Failed
              
              ❌ Failed to run ansible playbook: \`${{ needs.detect-ansible-command.outputs.playbook }}\`
              
              Please check the workflow logs for more details.
              `
            })
