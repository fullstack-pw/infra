name: Terraform Apply

on:
  pull_request:
    types: [closed]
    branches:
      - main
    paths:
      - "proxmox/**"
      - "clusters/**"

jobs:
  detect-changes:
    if: github.event.pull_request.merged == true
    runs-on: self-hosted
    outputs:
      proxmox: ${{ steps.filter.outputs.proxmox }}
      clusters: ${{ steps.filter.outputs.clusters }}
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v3
        id: filter
        with:
          filters: |
            proxmox:
              - 'proxmox/**'
            clusters:
              - 'clusters/**'

  apply-proxmox:
    needs: detect-changes
    if: needs.detect-changes.outputs.proxmox == 'true'
    runs-on: self-hosted
    environment: terraform
    steps:
      - name: Check for GitHub PAT
        run: |
          if [[ -z "${GITHUB_PAT}" ]]; then
            echo "::error::GITHUB_PAT environment variable is not set. This is required for pushing changes."
            exit 1
          fi
          echo "GitHub PAT is available"

      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.10.5

      - name: Install jq
        run: |
          if ! command -v jq &> /dev/null; then
            sudo apt-get update
            sudo apt-get install -y jq
          fi

      - name: Terraform Init
        working-directory: ./proxmox
        run: |
          terraform init

      - name: Terraform Apply
        working-directory: ./proxmox
        id: apply
        run: |
          terraform apply -auto-approve

      - name: Extract Ansible Playbook from PR
        if: steps.apply.outcome == 'success'
        id: extract-playbook
        run: |
          PR_TITLE="${{ github.event.pull_request.title }}"
          COMMIT_MSG="${{ github.event.pull_request.head.label }} ${{ github.event.pull_request.body }}"
          COMBINED="$PR_TITLE $COMMIT_MSG"

          # Look for [ansible playbook-name] pattern in title or body
          if [[ $COMBINED =~ \[ansible[[:space:]]+([^\]]+)\] ]]; then
            PLAYBOOK="${BASH_REMATCH[1]}"
            # Trim whitespace
            PLAYBOOK=$(echo $PLAYBOOK | xargs)
            echo "Found playbook: $PLAYBOOK"
            echo "ANSIBLE_PLAYBOOK=$PLAYBOOK" >> $GITHUB_ENV
            echo "ANSIBLE_TAG=[ansible $PLAYBOOK]" >> $GITHUB_ENV
          else
            echo "No ansible command found in PR"
            echo "ANSIBLE_TAG=" >> $GITHUB_ENV
          fi

      - name: Update Ansible Inventory
        if: steps.apply.outcome == 'success'
        run: |
          # Use the improved inventory script with better error handling
          chmod +x proxmox/update-inventory.sh
          ./proxmox/update-inventory.sh || echo "Warning: Inventory update script encountered issues but workflow will continue"
          # Make sure new_hosts.txt exists even if the script failed
          touch proxmox/new_hosts.txt

      - name: Commit and Push Changes
        if: steps.apply.outcome == 'success'
        id: commit-changes
        run: |
          # Configure git
          git config --local user.email "actions@github.com"
          git config --local user.name "GitHub Actions"

          # Add the updated files
          git add proxmox/k8s.ini proxmox/new_hosts.txt || true

          # Check if there are changes to commit
          if git diff --quiet && git diff --staged --quiet; then
            echo "No changes to commit"
            echo "changes_made=false" >> $GITHUB_OUTPUT
            exit 0
          fi

          # Prepare commit message
          COMMIT_MSG="Auto-update Ansible inventory"
          if [ -n "$ANSIBLE_TAG" ]; then
            COMMIT_MSG="$COMMIT_MSG $ANSIBLE_TAG"
          fi

          # Commit changes
          git commit -m "$COMMIT_MSG"

          # Extract owner and repo name separately
          OWNER_REPO="${GITHUB_REPOSITORY}"
          OWNER=$(echo $OWNER_REPO | cut -d '/' -f 1)
          REPO=$(echo $OWNER_REPO | cut -d '/' -f 2)

          # Show token type (but not value) for debugging
          TOKEN_START=${GITHUB_PAT:0:4}
          echo "Token starts with: $TOKEN_START"

          # Try add origin
          echo "Try remove and add origin"
          git remote remove origin
          git remote add origin "https://${GITHUB_PAT}@github.com/${OWNER}/${REPO}.git"
          git push

          echo "::notice::Successfully pushed inventory changes"
          echo "changes_made=true" >> $GITHUB_OUTPUT

  apply-clusters:
    needs: detect-changes
    if: needs.detect-changes.outputs.clusters == 'true'
    runs-on: self-hosted
    environment: terraform
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.10.5

      - name: Terraform Init
        working-directory: ./clusters
        run: |
          terraform init

      - name: Terraform Apply
        id: apply
        run: |
          make apply

      - name: Add Apply Comment
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## Clusters Terraform Apply
              
              ✅ Successfully applied Terraform changes to Kubernetes clusters.
              
              Apply completed at: ${new Date().toISOString()}
              `
            })
        if: steps.apply.outcome == 'success'

      - name: Add Apply Error Comment
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## Clusters Terraform Apply Failed
              
              ❌ Failed to apply Terraform changes to Kubernetes clusters.
              
              Please check the workflow logs for more details.
              `
            })
        if: steps.apply.outcome != 'success'
