name: Terraform Apply

on:
  pull_request:
    types: [closed]
    branches:
      - main
    paths:
      - "proxmox/**"
      - "clusters/**"

jobs:
  detect-changes:
    if: github.event.pull_request.merged == true
    runs-on: self-hosted
    outputs:
      proxmox: ${{ steps.filter.outputs.proxmox }}
      clusters: ${{ steps.filter.outputs.clusters }}
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v3
        id: filter
        with:
          filters: |
            proxmox:
              - 'proxmox/**'
            clusters:
              - 'clusters/**'

  apply-proxmox:
    needs: detect-changes
    if: needs.detect-changes.outputs.proxmox == 'true'
    runs-on: self-hosted
    environment: terraform
    env:
      TF_VAR_proxmox_password: ${{ secrets.PROXMOX_PASSWORD }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.5.7

      - name: Terraform Init
        working-directory: ./proxmox
        run: |
          export AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}
          export AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}
          terraform init

      - name: Terraform Apply
        working-directory: ./proxmox
        id: apply
        run: |
          terraform apply -auto-approve

      - name: Extract Ansible Playbook from PR
        if: steps.apply.outcome == 'success'
        id: extract-playbook
        run: |
          PR_TITLE="${{ github.event.pull_request.title }}"
          COMMIT_MSG="${{ github.event.pull_request.head.label }} ${{ github.event.pull_request.body }}"
          COMBINED="$PR_TITLE $COMMIT_MSG"

          # Look for [ansible playbook-name] pattern in title or body
          if [[ $COMBINED =~ \[ansible[[:space:]]+([^\]]+)\] ]]; then
            PLAYBOOK="${BASH_REMATCH[1]}"
            # Trim whitespace
            PLAYBOOK=$(echo $PLAYBOOK | xargs)
            echo "Found playbook: $PLAYBOOK"
            echo "ANSIBLE_PLAYBOOK=$PLAYBOOK" >> $GITHUB_ENV
            echo "ANSIBLE_TAG=[ansible $PLAYBOOK]" >> $GITHUB_ENV
          else
            echo "No ansible command found in PR"
            echo "ANSIBLE_TAG=" >> $GITHUB_ENV
          fi

      - name: Update Ansible Inventory
        if: steps.apply.outcome == 'success'
        run: |
          chmod +x proxmox/update_inventory.sh
          ./proxmox/update_inventory.sh

      - name: Commit Inventory Changes
        if: steps.apply.outcome == 'success'
        id: commit-changes
        run: |
          git config --local user.email "actions@github.com"
          git config --local user.name "GitHub Actions"
          git add proxmox/k8s.ini

          if git diff --quiet && git diff --staged --quiet; then
            echo "No changes to commit"
            echo "changes_made=false" >> $GITHUB_OUTPUT
          else
            # Include ansible tag in commit message if available
            if [ -n "$ANSIBLE_TAG" ]; then
              git commit -m "Auto-update Ansible inventory $ANSIBLE_TAG"
            else
              git commit -m "Auto-update Ansible inventory"
            fi
            git push
            echo "changes_made=true" >> $GITHUB_OUTPUT
          fi

  apply-clusters:
    needs: detect-changes
    if: needs.detect-changes.outputs.clusters == 'true'
    runs-on: self-hosted
    environment: terraform
    env:
      TF_VAR_vault_token: ${{ secrets.VAULT_TOKEN }}
      TF_VAR_kubernetes_ca_cert: ${{ secrets.KUBERNETES_CA_CERT }}
      TF_VAR_token_reviewer_jwt: ${{ secrets.TOKEN_REVIEWER_JWT }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.5.7

      - name: Terraform Init
        working-directory: ./clusters
        run: |
          export AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}
          export AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}
          terraform init

      - name: Terraform Apply
        working-directory: ./clusters
        id: apply
        run: |
          terraform workspace select sandbox || terraform workspace new sandbox
          terraform apply -auto-approve

      - name: Add Apply Comment
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## Clusters Terraform Apply
              
              ✅ Successfully applied Terraform changes to Kubernetes clusters.
              
              Apply completed at: ${new Date().toISOString()}
              `
            })
        if: steps.apply.outcome == 'success'

      - name: Add Apply Error Comment
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## Clusters Terraform Apply Failed
              
              ❌ Failed to apply Terraform changes to Kubernetes clusters.
              
              Please check the workflow logs for more details.
              `
            })
        if: steps.apply.outcome != 'success'
