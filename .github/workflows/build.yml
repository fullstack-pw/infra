name: Build Docker Images

on:
  push:
    branches: [main]
    paths: ["**/Dockerfile"]
  workflow_dispatch:
  pull_request:
    branches: [main]
    paths: ["**/Dockerfile"]

jobs:
  build:
    runs-on: self-hosted

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch all history for all tags and branches

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Get version tag
        id: get_version
        run: |
          # Get the latest tag
          VERSION=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          # Strip 'v' prefix if it exists
          VERSION=${VERSION#v}
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Version: $VERSION"

      - name: Expose HARBOR_KEY to the Workflow
        run: echo "HARBOR_KEY=${HARBOR_KEY}" >> $GITHUB_ENV

      - name: Login to Harbor
        uses: docker/login-action@v3
        with:
          registry: registry.fullstack.pw
          username: admin
          password: ${{ env.HARBOR_KEY }}

      - name: Find and Build Modified Dockerfiles
        run: |
          # Get list of changed files
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            # For PRs, compare against the base branch
            CHANGED_FILES=$(git diff --name-only ${{ github.event.pull_request.base.sha }}..${{ github.sha }})
          else
            # For pushes, compare against the previous commit
            CHANGED_FILES=$(git diff --name-only HEAD~1..HEAD)
          fi

          echo "Changed files:"
          echo "$CHANGED_FILES"

          # Filter for Dockerfiles and extract unique directories
          MODIFIED_DOCKERFILES=$(echo "$CHANGED_FILES" | grep -E "(^|/)Dockerfile$" | grep -v "/\." | grep -v "/node_modules/")

          if [ -z "$MODIFIED_DOCKERFILES" ]; then
            echo "No Dockerfiles were modified. Skipping build."
            exit 0
          fi

          echo "Modified Dockerfiles:"
          echo "$MODIFIED_DOCKERFILES"

          # Process each modified Dockerfile
          echo "$MODIFIED_DOCKERFILES" | while read -r DOCKERFILE; do
            if [ -n "$DOCKERFILE" ]; then
              # Get parent directory name for image name
              DIR=$(dirname "$DOCKERFILE")
              IMAGE_NAME=$(basename "$DIR")
              
              echo "Building $DOCKERFILE as registry.fullstack.pw/library/$IMAGE_NAME:latest"
              
              # Build with both tags
              docker build \
                -t registry.fullstack.pw/library/$IMAGE_NAME:latest \
                -t registry.fullstack.pw/library/$IMAGE_NAME:${{ steps.get_version.outputs.version }} \
                -f "$DOCKERFILE" "$DIR"
              
              # Push both tags
              docker push registry.fullstack.pw/library/$IMAGE_NAME:latest
              docker push registry.fullstack.pw/library/$IMAGE_NAME:${{ steps.get_version.outputs.version }}
            fi
          done
